package:
  name: ypkpathway    # lower case name of package, may contain '-' but no spaces
  #version: "1.1.4"   # version of package. Should use the PEP-386 verlib (hope this will be set by versioneer)
                      # conventions. Note that YAML will interpret
                      # versions like 1.0 as floats, meaning that 1.0 will
                      # be the same as 1. To avoid this, always put the
                      # version in quotes, so that it will be interpreted
                      # as a string.

                      # The version cannot contain a dash '-' character.

source:
  # The source section specifies where the source code of the package is
  # coming from, it may be coming from a source tarball like:
  #fn: bsdiff-1.1.14.tar.gz
  #url: https://pypi.python.org/packages/source/b/bsdiff4/bsdiff4-1.1.4.tar.gz
  #md5: 29f6089290505fc1a852e176bd276c43
  #sha1: f0a2c9a30073449cfb7d171c57552f3109d93894
  #sha256: 5a022ff4c1d1de87232b1c70bde50afbb98212fd246be4a867d8737173cf1f8f

  # or from git:
  # git_url can also be a relative path to the recipe directory
  #git_url: https://github.com/ilanschnell/bsdiff4.git
  #git_tag: 1.1.4

  # or from hg:
  #hg_url: ssh://hg@bitbucket.org/ilanschnell/bsdiff4
  #hg_tag: 1.1.4

  # or from svn:
  #svn_url: https://github.com/ilanschnell/bsdiff
  #svn_rev: 1.1.4
  #svn_ignore_externals: yes # (defaults to no)

  # or from a local path:
  # if the path is relative it is taken relative to the recipe
  # directory. The source is copied to the work directory before building.
  # path: ../src
  path: .
  # Patches may optionally be applied to the source
  #patches:
  #  - my.patch    # the patch file is expected to be found in the recipe

build:
  # The build number should be incremented for new builds of the same version
#  number: 1       # (defaults to 0)
#  string: abc     # (defaults to default conda build string plus the build
                  # number)
                  # The build string cannot contain a dash '-' character

  # Optional Python entry points
#  entry_points:
    # This creates an entry point named bsdiff4 that calls
    # bsdiff4.cli.main_bsdiff4()
    - bsdiff4 = bsdiff4.cli:main_bsdiff4
    - bspatch4 = bsdiff4.cli:main_bspatch4

  # If osx_is_app is set, entry points will use python.app instead of
  # python in Mac OS X
#  osx_is_app: yes # (defaults to no)

  # See the Features section below for more information on features

  # Defines what features a package has
#  features:
#    - feature1

  # Indicates that installing this package should enable (track) the given
  # features. It is generally a good idea to use a separate metapackage to
  # track a feature, which does not have the feature. See the Features
  # section below for more information about features.
#  track_features:
#    - feature2
  # Preserve the Python egg directory. This is needed for some packages
  # that use setuptools specific features.
  preserve_egg_dir: yes # (default no)

  # A list of globs for files that should not be linked (soft or
  # hard). They will always be copied.
  no_link:
    - bin/*.py # Don't link any .py files in bin/

  # Used instead of build.sh or bld.bat. For short build scripts, this can
  # be more convenient. You may need to use selectors (see below) to use
  # different scripts for different platforms.

  script: 
    - echo "This is my binstar build with conda"
    - python setup.py install

  # Set which RPATHs are used when making executables relocatable. This
  # currently only works on Linux.  The default is lib/
  rpaths:
    - lib/
    - lib/R/lib/

  # Force files to always be included, even if they are already in the
  # environment from the build dependencies. This is needed, for instance,
  # to create a recipe for conda itself.
#  always_include_files:
#    - bin/file1
#    - bin/file2

  #########################################################################
  # binary_relocation, has_prefix_files, binary_has_prefix_files, and     #
  # detect_binary_files_with_prefix may be required to relocate files     #
  # from the build environment to the installation environment.  See      #
  # "Making Packages Relocatable" below.                                  #
  #########################################################################

  # Whether binary files should be made relocatable using install_name_tool
  # on OS X or patchelf on Linux.
  binary_relocation: false # (defaults to true)

  # Binary files may contain the build prefix and need it replaced with the
  # install prefix at installation time.  Conda can automatically identify
  # and register such files:
  detect_binary_files_with_prefix: true # (defaults to false)
  # or you may elect to specify such files individually:
#  binary_has_prefix_files:
#    - bin/binaryfile1
#    - lib/binaryfile2

  # Text files (containing no NULL bytes) may contain the build prefix and
  # need it replaced with the install prefix at installation time.  Conda
  # will automatically register such files.  Binary files that contain the
  # build prefix are generally handled differently (see
  # binary_has_prefix_files or detect_binary_files_with_prefix), but there
  # may be cases where such a binary file needs to be treated as an
  # ordinary text file, in which case they need to be identified:
#  has_prefix_files:
#    - bin/file1
#    - lib/file2

# the build and runtime requirements. Dependencies of these requirements
# are included automatically.

requirements:

  # Packages required to build the package. python and numpy must be
  # listed explicitly if they are required.
  build:
    - python
  # Packages required to run the package. These are the dependencies that
  # will be installed automatically whenever the package is installed.
  # Package names should be any valid conda spec (see "Specifying versions
  # in requirements" below).
  run:
    - python
#    - argparse # [py26]
#    - six >=1.8.0

test:
  # files which are copied from the recipe into the (temporary) test
  # directory which are needed during testing
  files:
#    - test-data.txt
  # in addition to the run-time requirements, you can specify requirements
  # needed during testing. The run time requirements specified above are
  # included automatically.
  requires:
    - nose
  # commands we want to make sure they work, which are expected to get
  # installed by the package
  commands:
    - bsdiff4 -h
    - bspatch4 -h
  # Python imports
  imports:
    - bsdiff4

  # The script run_test.sh (or .bat/.py/.pl) will be run automatically
  # if it is part of the recipe.
  # (.py/.pl scripts are only valid as part of Python/Perl packages, respectively)

about:
  home: https://github.com/ilanschnell/bsdiff4
  license: BSD
  summary: binary diff and patch using the BSDIFF4-format

# If the app key is present, the package will be an app, meaning it will
# appear in the Anaconda launcher.
app:
  # The command that is called to launch the app
  entry: ipython notebook
  # Icon file contained in the recipe
  icon: icon_64x64.png
  summary: Summary of the package
  # If own_environment is true, installing the app through the launcher
  # will install into its own environment. The default is false.
  own_environment: true
